Fecha: 19/07/17

* Empiezo a escribir en este archivo los cambios y nuevas 
funcionalidades del proyecto.


* Reordené (y a mi criterio mejoré) la forma de tratar con 
igualdad/desigualdad de invididuos.
Ahora la igualdad (Equal en Logic.gf) y la diferencia (Different en Logic.gf), 
tratada como un caso adicional, son predicados binarios (Pred2).
La diferencia es tratada aparte para poder escribir frases como "A es distinto de B".
Sin esta separación la única forma de expresar esto sería mediante la frase: 
"A no es igual a B" (como negación de sentencias atómicas).

[

Miguel: no es tan fácil linealizar ¬A=B como "A es diferente de B" porque
los parámetros refieren a cosas linealizadas.

Diego tira la idea de usar tipos dependientes para ver si facilita.

La solución es utilizar un constructor nuevo que permita parsear más
oraciones pero nos lo quitamos de encima mediante una función de
transferencia. La pregunta es si podemos hacer una función inversa
que nos de tanto "¬(A = B)" como "A≠B".

¿Una función de transferencia puede devolver una lista?

Experimento: parsear "A es distinto de B" y devolverlo de vuelta a
español pasando por Symb nos da un montón de resultados entre ellos
el original.
]


* Implementé la aplicación parcial de predicados binarios. 
    (PartPred : Pred2 -> Ind -> Pred1, en Logic.gf)
Esta nueva funcionalidad requirió, en primer medida, modificar 
las categorías en la sintaxis concreta (lincat) de Pred1 y Pred2.
La forma en que implementé esto es usando records y parámetros, 
que serán los que definirán el tipo de predicado y hacielndo casos 
(comando "case") en Logic(Spa | Sym).gf para manipular los regristros 
de manera adecuada.

Los parámetros usados son:
  - param Pred2Type = Equality | Inequality | Position ;
  - param Pred1Type = Original | Equality1 | Inequality1 | Position1 ;
  ( No está muy elegante esto, ya voy a ver si hay una forma mejor de hacerlo)

y en el caso de la sintaxis del lenguaje simbólico, los tipos de registros:
  - Pred1 = { t : Pred1Type ; symb : Str ; ind : Str } ;
  Donde se guarda el tipo del predicado (original o proveniente de una aplicación parcial),
  el símbolo del predicado y el individuo que se propaga en caso de ser una aplicación parcial.
  (Notar que en el caso que Pred1Type sea Original, ind no tiene utilidad. 
  Buscar mejor forma de resolver esto!)

[

- Una primera mejora es utilizar un constructor para Pred1Type y no repetir
cada constructor de Pred2Type.

- ¿Podemos generalizar ambos tipos y definir Pred cuyo primer campo indica
si es binario o unario? ¿Cómo lidiamos con aplicación parcial? 

- Para evitar tener que inventar un string (vacío) para cuando Pred1Type
es original podemos utilizar tipos dependientes

def
  indPred1 : Pred1Type -> Set 
  indPred1 Original = ⊥
  indPred1 (PA _)   = String


] 

  - Pred2 = { t : Pred2Type ; s : Str } ;
(Para más detalle ver Categories(Spa | Sym).gf y Logic(Spa | Sym).gf)

La aplicación parcial permite frases como las siguientes:
> Aplicación parcial en el término de cuantificación:
    - "Cada figura roja está a la izquierda de B"
    Donde "a la izquierda de B" se parsea como un predicado unario, creado a partir de la aplicación 
    parcial del Pred2 Izquierda con el Ind "B".
    De la misma manera otras frases como:
    - "cada figura roja es igual a B"
    - "cada figura roja es diferente de B"
> Aplicación parcial en el rango de cuantificación:
    - "cada figura arriba de B es roja"
    (Hasta el momento es la única manera de escribir esto. creo que estaría bueno también poder escribir
    frases como "cada figura que está arriba de B es roja", es decir, agregando "que está").
    De la misma manera otras frases como:
    - "alguna figura arriba de B es grande"
    - "cada figura diferente de B es roja"
    - "cada figura distinta de B está arriba de B" (aplicación parcial en rango y término)

Notar que ahora frases como: "A está arriba de B", pueden ser interpretadas como la aplicación normal
de un predicado binario, o como la aplicación del predicado unario generado a partir de la aplicación parcial ("arriba de b").


* Función de transferencia PropPreds ampliada, para conjunción 
de individuos en Pred2 y en aplicación parcial.

Sobre Pred2:
Hago algunas suposiciones que creo correctas: (Espero su devolución sobre esto)

La frase:
    "A no está arriba de B y C"
se traduce a:
    ¬(arriba.A.B ∧ arriba.A.C)
Mientras que:
    "A y B no están arriba de C"
se traduce a:
    (¬arriba.A.C ∧ ¬arriba.B.C)

(Ver PropPreds en Logic.gf para ver todos los casos.)

[ Miguel le pasa la gramática a Diego ]

* Agregué APredRefl : Pred2 -> Ind -> Atom, para escribir frases donde los individuos aplicados
al predicado binario sean el mismo.
Se aceptan frases como:
    "A es igual a sí" (Estaría bueno agregar "igual a sí mismo" ?)
    "A no está arriba de sí"

Notar que APredRefl genera dos interpretaciones posibles:
    "A es igual a sí"
traduce a:
    "(A = A)"
    "(A = sí)"
La solución a esto debería ir de la mano con que en SAT solo mayúsculas son nombres de constantes.


* Pendiente: Distribuir predicado binario a una lista de individuos.
Frases que agregaría esto:
    "A, B y C son iguales"
    "A, B y C son distintos"
Pensamiento:
    Predicados "posicionales", como estar arriba de, no deberían poder ser
    "distribuídos".

[

Diego está usando tipos dependientes para indicar si se puede
distribuir o no.

]



Fecha: 24/07/17

* Empecé a implementar la distribución de predicados binarios a lista de individuos.
Uso tipos dependientes para poder seleccionar los predicados que distribuyen y los que no.
Ver categoría (Distr Pred2) y funciones (distr_equal, distr_diff).

Nota: El parser no completa el arbol. (Ver bien distintos casos (gf/examples/chapter6/(DShopping.gf|Classes.gf)) 
de parseo con tipos dependientes) 

Ejemplo:
p -lang=Spa "A y B son iguales"
genera:
PAtom (APred2Distr Equal ?2 (BaseInd (IVar (VString "A")) (IVar (VString "B"))))

Es posible completarlo pasando el AST al comando gt (generate_tree).
Ejemplo:
p -lang=Spa "A y B son iguales" | gt -lang=Spa
genera:
PAtom (APred2Distr Equal distr_equal (BaseInd (IVar (VString "A")) (IVar (VString "B"))))

Aun no está resuelto como generar en GF las posibles combinaciones de pares de individuos,
para listas de largo mayor o igual a 3.

Ejemplo:
parsear la frase:
 p -lang=Spa "A , B y C son iguales" | gt -lang=Spa
genera:
PAtom (APred2Distr Equal distr_equal (ConsInd (IVar (VString "A")) (BaseInd (IVar (VString "B")) (IVar (VString "C")))))

La función de transferencia, para producir un AST que linealice a lenguaje simbólico debería generar:
(A = B) ∧ (A = C) ∧ (B = C)


* Agregué una función PConjs : Conj -> [Prop] -> Prop, (Ver Logic.gf) para parsear listas de proposiciones.
Ejemplo de uso:
p -tr -lang=Spa "A es rojo , B es verde y C es azul" | gt -lang=Spa | pt -transfer=PropList | l -bind -lang=Sym
parsea:
PConjs CAnd (ConsProp (PAtom (APred1 Rojo (IVar (VString "A")))) (BaseProp (PAtom (APred1 Verde (IVar (VString "B")))) (PAtom (APred1 Azul (IVar (VString "C"))))))
linealiza:
(Rojo.A ∧ (Verde.B ∧ Azul.C))


* Mejoré el tipo Pred1Type, usando constructores, al estilo Haskell.

TO DO:
======

1) Terminar distribución de predicados binarios
2) Implementar Negación de Kinds
3) Modularizar funciones de transferencia
4) Entender un poco mejor tipos dependientes, ver si se pueden usar como dijo Miguel 
(Ver comentarios en 19/07).

02/08/17

copia de mail que mandé:

Buenas, cuento un (no tan) poco lo que estuve haciendo:

1)
Pregunté en la lista de mail de GF sobre distribución de predicados en una lista de individuos. Más que nada mi intención era saber si existía alguna manera de lograr la generación de todas las combinaciones de 2 elementos de la lista mediante una función de transferencia en GF, y al parecer la respuesta es "No". Sobre esto se me ocurren dos opciones: 
Dejar GF y usar Haskell. (Mi principal inconveniente con Haskell es que pierdo la "interactividad" que provee la app de GF, con cosas como, parsing incremental, posibilidad de rastrear los AST, etc).
Seguir con GF, teniendo en mente que hay cosas que no voy a poder hacer, y luego las voy a tener que hacer en Haskell.

2)
Investigué y logré abrir un servidor sencillo donde uno puede cargar su gramática y hacer parsing incremental. 
Tiene una interfaz bastante simple y bonita. Todo  el código es del paquete de GF. 
Ranta llama a la interfaz Minibar, un ejemplo, con gramáticas de prueba está en:

http://cloud.grammaticalframework.org/minibar/minibar.html

El problema: La traducción es directa (sin la posibilidad de usar funciones de transferencia), y hasta ahora no encontré
la forma de modificar esto, estuve ojeando un poco la API de Javascript.
Sin embargo puede ser de gran ayuda ver este código si en algún momento implemento algo web propio.

3)
Lo que hasta ahora más tiempo me viene llevando y sin mucho progreso:
En un principio el título sería "Negación de Kind".

Como repaso:
Kind está en este momento pensado como "Dominio de cuantificación" y hay una constructor base, que en SAT es Figura, y modificadores, que son predicados unarios (Pred1) que son (lingüísticamente) adjetivos que modifican a figura.

Luego uno puede lograr parsear frases como:

toda figura roja ... (en realidad, cada figura roja ..., otra de las cosas que tengo que hacer)
toda figura roja y grande ...
toda figura roja y abajo de A ... (con aplicación parcial)

y la idea inicial era poder agregar en los dominios de cuantificación un poco de negación y poder aceptar frases como:
Toda figura que no es roja ...
Toda figura roja y que no es grande ...

El problema principal, para mí, es que no es tan fácil de generalizar esto.

La primera nota importante que puedo tomar, es que no solo es útil lo que estoy haciendo para dominios de cuantificación, sino que también se aplica en conjunción de predicados en sentencias sin cuantificadores.

Algunos ejemplos:

A es rojo pero no es grande
A no es rojo y grande
A no es rojo ni grande
A es rojo, chico, pero no es cuadrado

y casos así hay un montón, y hasta el momento no los estoy consiguiendo atrapar con alguna idea general, o no tan general, pero que al menos sea aceptable.

Lo más general que se me ocurre: 
Mezclar adjetivos "positivos" con adjetivos "negados". 
por ejemplo:
* A es rojo, [es] grande, y no es cuadrado. / A es rojo, [es] grande pero no es cuadrado.
* A es rojo, no es grande y es cuadrado.


Una idea que por ahí podría simplificar un poco las cosas, es solo permitir "positivos" por un lado y "negativos" por otro.
Algo como:
A es Adj1, Adj2, ... y AdjN pero no es Adj(N+1), Adj(N+2), ... ni Adj(N+M).

Es algo arbitrario, pero por ahí algo más claro para interpretar y escribir.

--

De código no hubo mucho avance, principalmente porque estoy un poco trabado con esto.

Perdón por lo extenso, y si por ahí hay cosas que no quedan muy claras, avisen.

Voy a seguir trabajando en estos días con estas ideas, más que nada 3)

Estaría bueno si pueden leerlas antes de la próxima reunión. Yo este viernes estoy en Córdoba, así que si pueden juntarse, me vendría bárbaro.

Saludos, y que anden bien !

--------
20/09/17

Ahora Pred1 es un tipo dependiente de la polaridad.
Por el momento polaridad solamente es Positiva (P) y Negativa (N). 
Es decir, polaridad representada con el tipo Pol, se define como: Pol = P | N.
Se puede ver la posibilidad de agregar una polaridad "mixta", que permita
que una aplicación sea positiva y negativa.

Luego el nuevo tipo usado en Logic.gf es Pred1 Pol.

* Aplicación de predicados:

Aplicación "positiva":

APred1 : Pred1 P -> Ind -> Atom ;  -- igual que antes

Aplicación "negativa":

ANPred1 : Pred1 N -> Ind -> Prop

La decisión de que ANPred1 devuelva una proposición descarta la posibilidad
de negar mediante PNegAtom el resultado de ANPred1. (Notar que NPred1 ya devuelve
una proposición negada)

Frases parseadas con ANPred1:
    - "A no es rojo"
    - "A no es rojo ni grande"

* Conjunción de Predicados

Conjunción negativa:

ConjPred1 : Conj -> [Pred1 P] -> Pred1 P ;  -- igual que antes

Conjunción positiva:

ConjNegPred1 : [Pred1 P] -> Pred1 N ;

Solo se usa para conjunción negativa con "ni". 
Que el resultado sea un Pred1 N evita aceptar frases como: "A es rojo ni grande".

Frases que permite parsear:
  - "A no es rojo ni grande" 
  (Rojo ni grande es el Pred1 negativo, creado por ConjNegPred1)
  También en cuantificación:
    En rango:
  - "cada figura que no es roja ni grande es cuadrada"
    En término:
  - "cada figura cuadrada no es roja ni grande" 
     (Se podría modificar la gramática para aceptar también 
      frases de la forma "cada figura que es cuadrada .. ")


* Modificador de polaridad (Positivo a Negativo)

NegatedPred1 : Pred1 P -> Pred1 N ;

Util para poder aceptar negación sin "ni" en aplicación de predicados 
(Esto ya se podía lograr antes con PNegAtom), y además, util para permitir negación 
general (negación de un solo predicado, o más de uno con cada posible conjunción) 
en rango y término de cuantificación.

Frases que permite
    En cuantificación: (Rango)
    - "cada figura que no es roja es grande" (negación de Rojo)
    - "cada figura que no es roja y cuadrada es grande" (negación de Rojo y Cuadrado)
    En cuantificación (Término)
    - "cada figura grande no es roja" (negación de Rojo)
    - "cada figura grande no es roja y cuadrada" (negación de Rojo y Cuadrado)

* Cuantificación con rango/término negado:

UnivIS  : Var -> Kind -> (pol : Pol) -> Pred1 pol -> Prop ;
ExistIS : Var -> Kind -> (pol : Pol) -> Pred1 pol -> Prop ;
ModKind : Kind -> (pol : Pol) -> Pred1 pol -> Kind ;

Los predicados que modifican Kind (rango), tanto como los del término,
dependen de la polaridad.

TODO:
=====
-> Hacer un script que permita testear automáticamente si un cierto 
conjunto de frases se parsea y traduce de la forma deseada. Ver si se puede hacer
mediante los comandos read_file y write_file de gf.
-> Ver la posibilidad de agregar una polaridad "mixta", que permita
que una aplicación sea positiva y negativa.
-> Cosas que no se explican en este log:
  * Funciones de transferencia para manipular el cambio de predicados con polaridad
  * Cambio en LogicSpa y LogicSym

Fin de log (20/09/17)
--------

25/09/17

- Creé un archivo 'script.gfs', junto con dos archivos 'in' y 'out'.
'in' cuenta con frases en lenguaje natural que serán traducidas a fórmulas.
'out' cuenta con las fórmulas correspondientes a una traducción correcta de cada frase de 'in'.
Ejecutar 'gf < script.gfs' permite testear que las frases de 'in' se traducen correctamente,
es decir, comparando la salida de la traducción en gf con las fórmulas escritas en 'out'.

16/10/17
1) Se restringe conjunción de predicados de misma "Clase":
Antes era una frase válida: "A es rojo y arriba de B"

Para sólo permitir conjunción de predicados de misma Clase,
agregué una nuevo tipo "Class". Pred1 y Pred2 ahora son dependientes
de la Clase.

Idealmente queremos:
-- Conjunción de predicados de misma clase, devuelve predicados de esa clase.
ConjPred1 : Conj -> (c : Class) -> [Pred1 P c] -> Pred1 P c ;

Sin embargo, conseguí entender que la forma en que estaba intentando implementarlo
no está soportada por GF.

Mi idea:
Linealizar Class con un tipo que no afecte a la linealización, usando `param`.
    param ClassC = SerC | EstarC ;
    lincat Class = ClassC ;

Luego, hacer análisis por casos en la definición de sintáxis concreta, al estilo:
    case c of {
        SerC => "Generar frase con ser" -- Ej: A es rojo y grande
        EstarC => "Generar frase con estar" -- Ej: A está arriba de B
    }
no funciona. Al parsear se permiten frases como "A es arriba de B".
¿Qué esta pasando? Al parsear, como Class no lleva dentro de su linealización
un String que sea usado, GF lo parsea con una metavariable,
es decir, cualquier valor es posible.

La justificación de por qué esto no es posible, está dada en:
https://groups.google.com/forum/#!searchin/gf-dev/param$20as$20lincat%7Csort:relevance/gf-dev/EhNAiy0uO9Q/9m0X1nuOMwQJ

¿Cómo resolví esto?

Dupliqué ConjPred1 en:
    ConjPred1Ser : Conj -> [Pred1 P Ser] -> Pred1 P Ser ;
    ConjPred1Estar : Conj -> [Pred1 P Estar] -> Pred1 P Estar ;

No es para mi gusto una buena solución, pero al menos es solución.

2) Ahora se puede parsear cuantificación universal escribiendo "todas las figuras...".

3) Ver en cuantificación:
  todas las figuras (que están arriba de ..) Hecho
  todas las figuras (que no están arriba de ..) Hecho

4) Fix: 'si y solo si' estaba seteado como operador binario polimórfico, se podían parsear frases como:
"A si y solo si B ..." de la misma forma que "A y B son rojos"
Solución:
De la misma manera que el implica, cree un nuevo constructor de Prop:
PEquiv : Prop -> Prop -> Prop ;

5) El jueves 5/10 mostré el trabajo a gente del grupo de PLN + Manu, buenas críticas :) Subo las slides,
archivo: charla_tesis_pln.pdf

6) Hice un formulario para recopilar datos, tuvo a mi parecer buen feedback. Hasta el momento, hay 32
respuestas. Link: https://goo.gl/forms/PPpxlYn84aq5WUeB2.
Sería interesante analizar (¿Cómo?) que 'estructuras de frases' están quedando afuera de la gramática 
definida hasta el momento. Pienso que algunas se podrán hacer, otras quedarán como trabajo futuro.

17/10
-----

1- Se puede escribir una oración cuantificada sin empezar la frase con "todos"/"alguna", 
sino que empezando con un individuo. Ver APred2Univ, APred2Exist en Logic.gf
Ejemplos:
  - A está arriba de todas las figuras rojas
  Traduce a:
  〈∀?1 : Rojo.?1 : arriba.A.?1 〉
  - A y B están a la izquierda de alguna figura cuadrada
  Traduce a:
  (〈∃?1 : Cuad.?1 : izq.A.?1 〉 ∧ 〈∃?1 : Cuad.?1 : izq.B.?1 〉)
  Sobre esta última: ¿Está bien la posibilidad de que la figura cuadrada no sea la misma?

AL INTRODUCIR ESTE CAMBIO COMPILAR LA GRAMÁTICA SE VOLVIÓ MÁS LENTO (1 min aprox).
Ver si esto es un problema propio o al crecer la gramática la compilación 
tiende a hacerse más lenta.
Por el momento para compilar uso:
"$> gf -j --make LogicSpa.gf LogicSym.gf"
y en gf, importar la gramática compilada:
"i Logic.pgf"

2- Se puede parsear frases usando la palabra "Ninguna" como cuantificador.
Se traduce a la negación de un existe.
Ejemplos:
  - ninguna figura grande es roja
  Traduce a:
  ¬〈∃?1 : Grande.?1 : Rojo.?1 〉

3- Extendí el punto 1, con la posibilidad de parsear frases cuantificadas
usando "ninguna".
Ver APred2None en Logic.gf. Devuelve Prop, esto permite fijar polaridad negativa en
la frase. Es decir, no queremos frases como "A está arriba de ninguna figura".
Inspirado en: http://www.rae.es/consultas/doble-negacion-no-vino-nadie-no-hice-nada-no-tengo-ninguna
Ejemplo:
  - A no está arriba de ninguna figura roja
  Traduce a:
  ¬〈∃?1 : Rojo.?1 : abajo.A.?1 〉

TODO:
=====
* Hacer elipsis en conjunción:
    A es rojo y [A] no es grande
    A es rojo y [A] está arriba de B
* Permitir empezar cuantificación sin "todas"/"alguna". Hecho
    ej: A está arriba de todos los cuadrados.
* Permitir cuantificación anidada:
    ej: Todos los triangulos están arriba de algún círculo
* Permitir que la forma también pueda ser un sustantivo.
  En cuantificación: "Todos los cuadrados ... "
